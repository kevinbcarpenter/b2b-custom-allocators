Polymorphic Memory Resources:
The core idea is to abstract memory allocation into a set of memory resources that can be customized and swapped at runtime.
Unlike traditional allocators, which require specifying a type and tend to be verbose, std::pmr is polymorphic and type-erased. This makes it simpler to use, particularly in containers.

Namespace:
All memory resource-related classes and functions are located in the std::pmr namespace.

Default vs Custom Memory Resources:
std::pmr::get_default_resource provides a global default memory resource.
You can define your own custom memory resource by inheriting from std::pmr::memory_resource.
